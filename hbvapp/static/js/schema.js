/*
  This JavaScript file contains the schema of the HBV tanks and the corresponding
  water levels in the thank. Basically we use D3.js here to realize both the static
  drawing and the transition. D3 will generate water tanks which are mainly static,
  and water levels controled by a scroll bar indicating time(date in our case). To
  previlige D3's data-driven nature, we will use the DataFrame generated by pyhton
  as our input data here.
*/

/* This is a oo version of schema to facilate animation manipulation */

function create_schema() {

  var Schema = {
    svg: d3.select(".schemaSvg"),
    p_width: [0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1, 1.125, 1.25],
    tanks: {},
    data: {},

    // Value, a factor to multiple with tanks' heights
    value: (2.0/3.0),

    // Minimum depth, to prevent zero or negative value
    base: (2.0/15.0),

    // Maximal height of water levels
    maxh: 0.85,

    // Key cords getter
    get cords() {
      var cords = this.generate_key_cords();
      return cords;
    },


    generate_key_cords: function(){
      var x = parseInt(this.svg.select("#main_soil").attr("x"));
      var y = parseInt(this.svg.select("#main_soil").attr("y"));
      var w_soil = parseInt(this.svg.select("#main_soil").attr("width"));
      var h_soil = parseInt(this.svg.select("#main_soil").attr("height"));

      var soil = {
        x: x,
        y: y,
        width: w_soil,
        height: h_soil,
        stroke: 4,
        };

      var uz = {
        x: 2,
        y: 438,
        x1: 242,
        y1: 546,
        stroke: 4,
        get width() {
          return (this.x1-this.x);
        },
        get height() {
          return (this.y1-this.y);
        },
      };

      var lz = {
        x: 2,
        y: 621,
        x1: 242,
        y1: 729,
        stroke: 4,
        get width() {
          return (this.x1-this.x);
        },
        get height() {
          return (this.y1-this.y);
        },
      };

      var cords = {soil: soil, uz: uz, lz: lz};
      return cords;
    },

    generate_main: function(name, cords) {
      var cord = eval('cords.'+name);
      var value = this.value;
      var tank = this.svg.append("rect")
                        .attr("x", function(){
                          return (cord.x+0.6*cord.stroke);
                         })
                        .attr("y", function(){
                          return (cord.height*(1-value)+cord.y);
                         })
                        .attr("width", function(){
                          return cord.width-0.9*cord.stroke;
                         })
                        .attr("height", function(){
                          return parseInt(cord.height*value);
                         })
                        .attr("fill", "#3333cc")
                        .attr("fill-opacity", 0.4)
                        .attr("id", name);
      return tank;
    },

    generate_shade: function (tank) {
      var name = tank.attr("id");
      var stroke = 4;

      var surf = this.svg.append("path")
                          .attr("stroke", "#0f0f3e")
                          .attr("stroke-width", 3)
                          .attr("stroke-opacity", 0.7)
                          .attr("class", "surf")
                          .attr("d", function(){
                            var x = tank.attr("x").toFloat();
                            var y = tank.attr("y").toFloat();
                            var length = tank.attr("width").toFloat() + 1.5*stroke;
                            return `M ${x} ${y} H ${length}`;
                          });

      var shade_clip = this.svg.append("clipPath")
                                .attr("id", `${name}_shade_container`)
                                .append("rect")
                                .attr("x", function(){return tank.attr('x').toFloat()+1;})
                                .attr("y", function(){return tank.attr('y').toFloat();})
                                .attr("width", function(){
                                  var w = tank.attr('width').toFloat() - 2;
                                  return w;
                                })
                                .attr("height", function(){
                                  var h = tank.attr('height').toFloat() - 1;
                                  return h;
                                })
                                .attr("fill", "#ccffff")
                                .attr("class", "shade_clip");

      var shade = this.svg.selectAll("#shade")
                          .data(this.p_width)
                          .enter()
                          .append("path")
                          .attr("d", function(d){
                            var x0 = tank.attr('x').toFloat() + tank.attr('width').toFloat() * d;
                            var y0 = tank.attr('y').toFloat();
                            var x1 = x0-tank.attr('height').toFloat();
                            var y1 = tank.attr('y').toFloat()+tank.attr('height').toFloat();
                            return `M ${x0} ${y0} L ${x1} ${y1}`;
                          })
                          .attr("stroke", "#3366ff")
                          .attr("stroke-width", 2)
                          .attr("stroke-opacity", 0.5)
                          .attr("clip-path", `url(#${name}_shade_container)`)
                          .attr("class", "shade");

      return {surf: surf, shade_clip: shade_clip, shade: shade, name: name};
    },

    init_animation: function() {
      var value = this.value;
      var cords = this.generate_key_cords();
      var tanks = { mains: {}, shades: {} };

      tanks.mains.soil = this.generate_main('soil', cords, value);
      tanks.shades.soil = this.generate_shade(tanks.mains.soil);
      tanks.mains.uz = this.generate_main('uz', cords, value);
      tanks.shades.uz = this.generate_shade(tanks.mains.uz);
      tanks.mains.lz = this.generate_main('lz', cords, value);
      tanks.shades.lz = this.generate_shade(tanks.mains.lz);

      return tanks;
    },

    trans: function(name, value) {
      var max = this.bounds[name+"_max"],
          min = this.bounds[name+"_min"];

      var fill = 1 - (max-value)/(max-min);

      var main = this.tanks.mains[name],
          shade = this.tanks.shades[name];

      var cords = this.cords[name];
      var ys = (cords.height*(1-fill)+cords.y).toFixed(2);
      var heights = (cords.height*fill).toFixed(2);

      main.transition()
          .attr("y", ys)
          .attr("height", heights);

      shade.surf.transition()
                .attr("d", function(){
                  var x = main.attr("x").toFloat();
                  var y = ys;
                  var length = main.attr("width").toFloat() + 1.5*cords.stroke;
                  return `M ${x} ${y} H ${length}`;
                });

      shade.shade_clip.transition()
                      .attr("y", ys)
                      .attr("height", heights);

      shade.shade.transition()
                 .attr("d", function(d){
                    var x0 = main.attr('x').toFloat() + main.attr('width').toFloat() * d;
                    var y0 = ys.toFloat();
                    var x1 = x0 - heights.toFloat();
                    var y1 = ys.toFloat() + heights.toFloat();
                    console.log(`M ${x0} ${y0} L ${x1} ${y1}`);
                    return `M ${x0} ${y0} L ${x1} ${y1}`;
                  });

    },

    point_to: function(index) {
      var foo = this.data[index];
      var date = foo.date,
          sm = foo.sm,
          uz = foo.uz,
          lz = foo.lz,
          wc = foo.wc,
          sp = foo.sp;


      this.trans("soil", sm);
      this.trans("uz", uz);
      this.trans("lz", lz);
    }

  };
  return Schema;
}

function init_slider(){
  var length = schema.data.length;
  var terminus = length-1;

  if (isEmpty(schema.data)) {
    $("#id_date_slider").prop("disabled", true);
    alert("It seems that we have no data ! ");
  }
  else {
    if ($("#id_date_slider").prop("disabled")) {
      $("#id_date_slider").prop("disabled", false);
      $("#id_date_slider").prop("max", terminus);
    } else {
      $("#id_date_slider").prop("this.value", 0);
      $("#id_date_slider").prop("max", terminus);
    }
  }
}
