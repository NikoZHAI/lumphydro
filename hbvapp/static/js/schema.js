/*
  This JavaScript file contains the schema of the HBV tanks and the corresponding
  water levels in the thank. Basically we use D3.js here to realize both the static
  drawing and the transition. D3 will generate water tanks which are mainly static,
  and water levels controled by a scroll bar indicating time(date in our case). To
  previlige D3's data-driven nature, we will use the DataFrame generated by pyhton
  as our input data here.
*/
function init_animation(value) {
  var imgsvg = d3.select(".schemaSvg");
  var cords = generate_key_cords(imgsvg);
  var tanks = new Object();

  tanks.soil = new Object();
  tanks.soil.main = generate_main('soil', cords, imgsvg, value);
  tanks.soil.shade = generate_shade(tanks.soil.main, imgsvg);
  tanks.uz = new Object();
  tanks.uz.main = generate_main('uz', cords, imgsvg, value);
  tanks.uz.shade = generate_shade(tanks.uz.main, imgsvg);
  tanks.lz = new Object();
  tanks.lz.main = generate_main('lz', cords, imgsvg, value);
  tanks.lz.shade = generate_shade(tanks.lz.main, imgsvg);

}

function generate_main(name, cords, svg, value) {
  var cord = eval('cords.'+name);
  var tank = svg.append("rect")
                    .attr("x", function(){
                      return (cord.x+0.6*cord.stroke);
                     })
                    .attr("y", function(){
                      return (cord.height()*(1-value)+cord.y);
                     })
                    .attr("width", function(){
                      return cord.width()-0.9*cord.stroke;
                     })
                    .attr("height", function(){
                      return parseInt(cord.height()*value);
                     })
                    .attr("fill", "#3333cc")
                    .attr("fill-opacity", 0.4)
                    .attr("id", name);
  return tank;
}

function generate_shade(tank, svg) {
  var name = tank.attr("id");
  var stroke = 4;
  var p_width = [0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1, 1.125, 1.25];

  var surf = svg.append("path")
                    .attr("stroke", "#0f0f3e")
                    .attr("stroke-width", 3)
                    .attr("stroke-opacity", 0.7)
                    .attr("d", function(){
                      var x = tank.attr("x").toFloat();
                      var y = tank.attr("y").toFloat();
                      var length = tank.attr("width").toFloat() + 1.5*stroke;
                      return `M ${x} ${y} H ${length}`;
                    });


  var shade_clip = svg.append("clipPath")
                          .attr("id", `${name}_shade_container`)
                          .append("rect")
                          .attr("x", function(){return tank.attr('x').toFloat()+1;})
                          .attr("y", function(){return tank.attr('y').toFloat();})
                          .attr("width", function(){
                            var w = tank.attr('width').toFloat() - 2;
                            return w;
                          })
                          .attr("height", function(){
                            var h = tank.attr('height').toFloat() - 1;
                            return h;
                          })
                          .attr("fill", "#ccffff");

  var shade = svg.selectAll("#shade")
                    .data(p_width)
                    .enter()
                    .append("path")
                    .attr("d", function(d){
                      var x0 = tank.attr('x').toFloat() + tank.attr('width').toFloat() * d;
                      var y0 = tank.attr('y').toFloat();
                      var x1 = x0-tank.attr('height').toFloat();
                      var y1 = tank.attr('y').toFloat()+tank.attr('height').toFloat();
                      return `M ${x0} ${y0} L ${x1} ${y1}`;
                    })
                    .attr("stroke", "#3366ff")
                    .attr("stroke-width", 2)
                    .attr("stroke-opacity", 0.5)
                    .attr("clip-path", `url(#${name}_shade_container)`);

  return {surf: surf, shade_clip: shade_clip, shade: shade, name: name};
}

String.prototype.toFloat = function() {
  var int = parseFloat(this).toFixed(2);
  return parseFloat(int);
};

function get_processed_data(data) {
  var dataset = JSON.parse(data);
  return dataset;
}

function generate_key_cords(svg){
  var soil = {
    svg: svg,
    x: parseInt(svg.select("rect#main_soil").attr("x")),
    y: parseInt(svg.select("rect#main_soil").attr("y")),
    width: function(){
      return parseInt(this.svg.select("rect#main_soil").attr("width"));
    },
    height: function(){
      return parseInt(this.svg.select("rect#main_soil").attr("height"));
    },
    stroke: 4,
    };

  var uz = {
    x: 2,
    y: 438,
    x1: 242,
    y1: 546,
    stroke: 4,
    width: function () {
      return (this.x1-this.x);
    },
    height: function () {
      return (this.y1-this.y);
    },
  };

  var lz = {
    x: 2,
    y: 621,
    x1: 242,
    y1: 729,
    stroke: 4,
    width: function () {
      return (this.x1-this.x);
    },
    height: function () {
      return (this.y1-this.y);
    },
  };

  var vars = {soil: soil, uz: uz, lz: lz};
  return vars;
}
