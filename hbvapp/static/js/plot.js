/*
  plot.js contains functions to generate plots using library plotly.js. Plots
  generated by Bokeh python is not as interactive as expected. For example, it
  is hard to call a callback function when we want to use values on the graph.
  And another idea is that plotly.js is capable to append/add traces(glyphs)
  dynamically by updating data, which is more efficient and less complicated than
  using Bokeh to generate <div>s and <script>s sent by post.
*/

/*
  Prototype Schema contains the schema of the HBV tanks and the corresponding
  water levels in the thank. Basically we use D3.js here to realize both the static
  drawing and the transition. D3 will generate water tanks which are mainly static,
  and water levels controled by a scroll bar indicating time. To
  previlige D3's data-driven nature, we will use the DataFrame generated by pyhton
  as our input data here.
*/

function Plot() {
  /*
    Plot object integrates data and several plotting functionalities
  */
  var time_step_type = "date",
      div_q = $('#id_pane_plot_q div')[0],
      div_p = $('#id_pane_plot_p div')[0],
      div_t = $('#id_pane_plot_t div')[0],
      div_gw = $('#id_pane_plot_gw div')[0],
      div_etp = $('#id_pane_plot_etp div')[0],
      div_reg = $('#id_pane_plot_reg div')[0],
      div_perf = $('#id_pane_plot_perf div')[0],
      width = $('#id_mainTabs')[0].clientWidth - 35,
      relayout_counter = 0,
      X_AXIS = {
        title: `Time (${time_step_type})`,
        showgrid: false, type: 'date', linewidth: 2.0,
        tickfont: {size: 11}, ticklen: 4,
        rangeselector: {
          visible: true,
          buttons: [
            {step: "all"},
            {
              count: 1,
              label: "yearly",
              step: "year",
              stepmode: "backward",
            },
            {
              count: 6,
              label: "6m",
              step: "month",
              stepmode: "backward",
            },
            {
              count: 1,
              label: "monthly",
              step: "month",
              stepmode: "backward",
            },
            {
              count: 7,
              label: "weekly",
              step: "day",
              stepmode: "backward",
            },
            {
              count: 1,
              label: "daily",
              step: "day",
              stepmode: "backward",
            },
          ],
          x: 0,
          xanchor: "left",
          y: 1,
          yanchor: "bottom",
        },
        rangeslider: {bgcolor: '#fdf2ff', bordercolor: 'rgb(91,192,222)',
                      borderwidth: 2, thickness: 0.12},
      };

  function init_q_plot () {
    var trace_qrec = {
      type: 'scatter',
      mode: 'lines',
      name: "Recorded Discharge [m<sup>3</sup>/s]",
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].q_rec,
      line: {
        width: 1
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };
    var trace_qsim = {
      type: 'scatter',
      mode: 'lines',
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].q_sim,
      name: "Simulated Discharge [m<sup>3</sup>/s]",
      line: {
        width: 1,
        color: '#0de55c' // Green like jade
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };

    var data = [trace_qrec, trace_qsim];
    var ymax = Math.max.apply([hbv.d.info[0].maxis['q_sim'], hbv.d.info[0].maxis['q_rec']]);

    var layout = {
      width: this.width,
      height: 0.68*this.width,
      title: "<b>Simulated Discharge</b>",
      yaxis: {title: "Discharge [m<sup>3</sup>/s]", hoverformat: '.3f',
        linewidth: 2.0, zeroline: false, range: [0, ymax*1.05],
        fixedrange: true,
      },
      xaxis: this.X_AXIS,
      legend: {font:{size:14}, orientation: "h", x: 0.25, y: 1,
                tracegroupgap: 20, bgcolor: 'rgba(0,0,0,0)',
      },
      margin: {
        l: 50, b: 50, r: 10, t: 30, pad: 10
      },
    };

    var config = {modeBarButtons:[
        ['select2d'], ['pan2d'], ['zoom2d'], ['autoScale2d'],
        ['resetScale2d'], ['hoverCompareCartesian'], ['toImage'],
        ['sendDataToCloud'],
      ], displaylogo: false,
    };

    $(this.div_q).html('');
    Plotly.newPlot(this.div_q, data, layout, config);

    this.div_q.on('plotly_relayout', function(e){
      console.log(e);
      onRelayoutCallBack(e);
    });
  }

  function init_p_plot () {
    var trace_p = {
      type: 'bar',
      name: 'Recorded Precipitation [mm]',
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].prec,
      hoverlabel: {font: {size: 12}, namelength: -1},
      opacity: 0.85,
      color: "#39afef",
    };
    var trace_sp = {
      type: 'scatter',
      fill: 'tozeroy',
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].sp,
      yaxis: 'y2',
      name: 'Simulated Snow [mm]',
      line: {
        width: 2,
        color: '#0de55c' // Green like jade
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };

    var data = [trace_p, trace_sp],
        ymax1 = hbv.d.info[0].maxis['prec'],
        ymax2 = (hbv.d.info[0].maxis['sp']==0)?(ymax1):(hbv.d.info[0].maxis['sp']);

    var layout = {
      width: this.width,
      height: 0.68*this.width,
      title: "<b>Precipitation and Snow</b>",
      yaxis: {title: "Precipitation [mm]", hoverformat: '.3f',
        linewidth: 2.0, zeroline: false, range: [0, ymax1*1.05],
        fixedrange: true,
      },
      yaxis2: {title: "Simulated Snow [mm]", hoverformat: '.3f',
        linewidth: 2.0, zeroline: false, range: [0, ymax2*1.2],
        fixedrange: true, overlaying: 'y', side: 'right', showgrid:false,
        linecolor: '#0de55c', tickfont: {color: '#0de55c'},
      },
      xaxis: this.X_AXIS,
      legend: {font:{size:14}, orientation: "h", x: 0.25, y: 1,
                tracegroupgap: 20, bgcolor: 'rgba(0,0,0,0)',
      },
      margin: {
        l: 50, b: 50, r: 50, t: 30, pad: 10
      },
      bargap: 0.4,
    };

    var config = {modeBarButtons:[
        ['select2d'], ['pan2d'], ['zoom2d'], ['autoScale2d'],
        ['resetScale2d'], ['hoverCompareCartesian'], ['toImage'],
        ['sendDataToCloud'],
      ], displaylogo: false,
    };

    $(this.div_p).html('');
    Plotly.newPlot(this.div_p, data, layout, config);

    this.div_p.on('plotly_relayout', function(e){
      console.log(e);
      onRelayoutCallBack(e);
    });
  }

  function init_t_plot () {
    var trace_temp = {
      type: 'scatter',
      mode: 'lines',
      name: 'Air Temperature [째C]',
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].temp,
      line: {
        width: 0.8
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };
    var trace_tm = {
      type: 'scatter',
      mode: 'lines',
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].tm,
      name: 'Monthly Average [째C]',
      line: {
        width: 2,
        color: '#ea129f' // Green like jade
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };

    var data = [trace_temp, trace_tm],
        ymin = hbv.d.info[0].minis['temp'],
        ymax = hbv.d.info[0].maxis['temp'];
    ymin = ymin - Math.abs(ymin)*0.1;
    ymax = ymax + Math.abs(ymax)*0.1;

    var layout = {
      width: this.width,
      height: 0.68*this.width,
      title: "<b>Air Temperature</b>",
      yaxis: {title: "Air Temperature [째C]", hoverformat: '.3f',
        linewidth: 2.0, zeroline: false, range: [ymin, ymax],
        fixedrange: true
      },
      xaxis: this.X_AXIS,
      legend: {font:{size:14}, orientation: "h", x: 0.30, y: 1,
                tracegroupgap: 20, bgcolor: 'rgba(0,0,0,0)',
      },
      margin: {
        l: 50, b: 50, r: 10, t: 30, pad: 10
      },
    };

    var config = {modeBarButtons:[
        ['select2d'], ['pan2d'], ['zoom2d'], ['autoScale2d'],
        ['resetScale2d'], ['hoverCompareCartesian'], ['toImage'],
        ['sendDataToCloud'],
      ], displaylogo: false,
    };

    $(this.div_t).html('');
    Plotly.newPlot(this.div_t, data, layout, config);

    this.div_t.on('plotly_relayout', function(e){
      console.log(e);
      onRelayoutCallBack(e);
    });
  }

  function init_etp_plot () {
    var trace_t = {
      type: 'scatter',
      mode: 'lines',
      name: 'Air Temperature [째C]',
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].temp,
      xaxis: 'x3', yaxis: 'y1',
      line: {
        width: 2,
        color: "#8417ea", // Purple blue
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };
    var trace_etp = {
      type: 'scatter',
      mode: 'lines',
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].ep,
      xaxis: 'x3', yaxis: 'y2',
      name: 'Evapotranspiration [mm]',
      line: {
        width: 2.0,
        color: "#52d883",
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };
    var trace_sm = {
      type: 'scatter',
      mode: 'lines',
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].sm,
      xaxis:'x3', yaxis: 'y3',
      name: "Soil Moisture [mm]",
      line: {
        width: 2, // Default color
        color: '#4286f4', // Green like jade
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };

    var data = [trace_t, trace_etp, trace_sm],
        ymax_t = hbv.d.info[0].maxis.temp,
        ymax_ep = hbv.d.info[0].maxis.ep,
        ymax_sm = hbv.d.info[0].maxis.sm;

    var axis = {
      showline: true,
      zeroline: false,
      showgrid: true,
      mirror:true,
      ticklen: 4.0,
      gridcolor: '#ffffff',
      tickfont: {size: 11},
      linewidth: 1.0,
    };

    var xaxis1 = {type: 'date', anchor: 'y1',
        showticklabels: false,
    };
    var xaxis2 = {
        type: 'date', anchor: 'y2',
        showticklabels: false,
    };
    var xaxis3 = {title: `Time (${time_step_type})`,
        type: 'date', anchor: 'y3',
        rangeselector: {
          visible: true,
          buttons: [
            {step: "all"},
            {
              count: 1,
              label: "yearly",
              step: "year",
              stepmode: "backward",
            },
            {
              count: 6,
              label: "6m",
              step: "month",
              stepmode: "backward",
            },
            {
              count: 1,
              label: "monthly",
              step: "month",
              stepmode: "backward",
            },
            {
              count: 7,
              label: "weekly",
              step: "day",
              stepmode: "backward",
            },
            {
              count: 1,
              label: "daily",
              step: "day",
              stepmode: "backward",
            },
          ],
          x: 1,
          xanchor: "right",
          y: -0.06,
          yanchor: "top",
        },
    };

    var yaxis1 = {title: "Air Temperature [째C]",
        range: [0, ymax_t], domain: [0.68, 0.98],
        anchor: 'x1', hoverformat: '.3f',
        fixedrange: true,
    };
    var yaxis2 = {title: "Evapotranspiration [mm]",
        range: [0, ymax_ep], domain: [0.34, 0.64],
        side: 'right', anchor: 'x2', hoverformat: '.3f',
        fixedrange: true,
    };
    var yaxis3 = {title: "Simulated Soil Moisture [mm]",
        range: [0, ymax_sm], domain: [0, 0.30],
        anchor: 'x3', hoverformat: '.3f',
        fixedrange: true,
    };

    var layout = {
      width: this.width,
      height: 0.75*this.width,
      title: "<b>Evapotranspiration, Simulated Soil Moisture and Air Temperature</b>",
      plot_bgcolor: 'rgba(228, 222, 249, 0.65)',
      yaxis1: Object.assign(yaxis1, axis),
      yaxis2: Object.assign(yaxis2, axis),
      yaxis3: Object.assign(yaxis3, axis),
      xaxis1: Object.assign(xaxis1, axis),
      xaxis2: Object.assign(xaxis2, axis),
      xaxis3: Object.assign(xaxis3, axis),
      legend: {font:{size:14}, orientation: "h", x: 0.18, y: 1.0,
                tracegroupgap: 20, bgcolor: 'rgba(0,0,0,0)',
      },
      margin: {
        l: 50, b: 50, r: 50, t: 30, pad: 10
      },
    };

    var config = {modeBarButtons:[
        ['select2d'], ['pan2d'], ['zoom2d'], ['autoScale2d'],
        ['resetScale2d'], ['hoverCompareCartesian'], ['toImage'],
        ['sendDataToCloud'],
      ], displaylogo: false,
    };

    $(this.div_etp).html('');
    Plotly.newPlot(this.div_etp, data, layout, config);

    this.div_etp.on('plotly_relayout', function(e){
      console.log(e);
      onRelayoutCallBack(e, 'xaxis3');
    });
  }

  function init_gw_plot () {
    var trace_uz = {
      type: 'scatter',
      mode: 'lines',
      name: "Upper Zone Response Box [mm]",
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].uz,
      xaxis: 'x3', yaxis: 'y1',
      line: {
        width: 1.5,
        color: "#8417ea", // Purple blue
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };
    var trace_lz = {
      type: 'scatter',
      mode: 'lines',
      x: hbv.d.data[0].time,
      y: hbv.d.data[0].lz,
      xaxis: 'x3', yaxis: 'y2',
      name: "Lower Zone Response Box [mm]",
      line: {
        width: 2.0,
        color: "#52d883",
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };
    var trace_gw = {
      type: 'scatter',
      mode: 'lines',
      x: hbv.d.data[0].time,
      y: hbv.d.inters[0].gw,
      xaxis:'x3', yaxis: 'y3',
      name: "Groundwater Discharged (Q<sub>0</sub>+Q<sub>1</sub>) [mm]",
      line: {
        width: 1.6, // Default color
        color: '#4286f4', // Green like jade
      },
      hoverlabel: {font: {size: 12}, namelength: -1},
    };

    var data = [trace_uz, trace_lz, trace_gw],
        ymax_uz = hbv.d.info[0].maxis.uz,
        ymax_lz = hbv.d.info[0].maxis.lz,
        ymax_gw = hbv.d.info[0].maxis.gw;

    var axis = {
      showline: true,
      zeroline: false,
      showgrid: true,
      mirror:true,
      ticklen: 4.0,
      gridcolor: '#ffffff',
      tickfont: {size: 11},
      linewidth: 1.0,
    };

    var xaxis1 = {type: 'date', anchor: 'y1',
        showticklabels: false,
    };
    var xaxis2 = {
        type: 'date', anchor: 'y2',
        showticklabels: false,
    };
    var xaxis3 = {title: `Time (${time_step_type})`,
        type: 'date', anchor: 'y3',
        rangeselector: {
          visible: true,
          buttons: [
            {step: "all"},
            {
              count: 1,
              label: "yearly",
              step: "year",
              stepmode: "backward",
            },
            {
              count: 6,
              label: "6m",
              step: "month",
              stepmode: "backward",
            },
            {
              count: 1,
              label: "monthly",
              step: "month",
              stepmode: "backward",
            },
            {
              count: 7,
              label: "weekly",
              step: "day",
              stepmode: "backward",
            },
            {
              count: 1,
              label: "daily",
              step: "day",
              stepmode: "backward",
            },
          ],
          x: 1.0,
          xanchor: "right",
          y: -0.06,
          yanchor: "top",
        },
    };

    var yaxis1 = {title: "Upper Response Box [mm]",
        range: [0, ymax_uz], domain: [0.68, 0.98],
        anchor: 'x1', hoverformat: '.3f',
        fixedrange: true,
    };
    var yaxis2 = {title: "Lower Response Box [mm]",
        range: [0, ymax_lz], domain: [0.34, 0.64],
        side: 'right', anchor: 'x2', hoverformat: '.3f',
        fixedrange: true,
    };
    var yaxis3 = {title: "Q<sub>0</sub>+Q<sub>1</sub> [mm]",
        range: [0, ymax_gw], domain: [0, 0.30],
        anchor: 'x3', hoverformat: '.3f',
        fixedrange: true,
    };

    var layout = {
      width: this.width,
      height: 0.75*this.width,
      title: "<b>Simulated Groundwater</b>",
      plot_bgcolor: 'rgba(228, 222, 249, 0.65)',
      yaxis1: Object.assign(yaxis1, axis),
      yaxis2: Object.assign(yaxis2, axis),
      yaxis3: Object.assign(yaxis3, axis),
      xaxis1: Object.assign(xaxis1, axis),
      xaxis2: Object.assign(xaxis2, axis),
      xaxis3: Object.assign(xaxis3, axis),
      legend: {font:{size:14}, orientation: "h", x: 0.18, y: 1.0,
                tracegroupgap: 20, bgcolor: 'rgba(0,0,0,0)',
      },
      margin: {
        l: 50, b: 50, r: 50, t: 30, pad: 10
      },
    };

    var config = {modeBarButtons:[
        ['select2d'], ['pan2d'], ['zoom2d'], ['autoScale2d'],
        ['resetScale2d'], ['hoverCompareCartesian'], ['toImage'],
        ['sendDataToCloud'],
      ], displaylogo: false,
    };

    $(this.div_gw).html('');
    Plotly.newPlot(this.div_gw, data, layout, config);

    this.div_gw.on('plotly_relayout', function(e){
      console.log(e);
      onRelayoutCallBack(e, 'xaxis3');
    });
  }

  function init_regime_plot () {
    if (hbv.d.info.time_range != "y") {
      return undefined;
    }
    var trace_qrec = {
      type: 'bar',
      name: 'Average Observed Discharge [m<sup>3</sup>/s]',
      x: hbv.d.regime[0].month,
      y: hbv.d.regime[0].q_rec,
      hoverlabel: {font: {size: 12}, namelength: -1},
      opacity: 0.85,
      color: "#39afef",
    };
    var trace_qsim = {
      type: 'bar',
      x: hbv.d.regime[0].month,
      y: hbv.d.regime[0].q_sim,
      name: 'Average Simulated Discharge [m<sup>3</sup>/s]',
      hoverlabel: {font: {size: 12}, namelength: -1},
    };

    var data = [trace_qrec, trace_qsim],
        max_qsim = d3.max(hbv.d.regime[0].q_sim),
        max_qrec = d3.max(hbv.d.regime[0].q_rec),
        ymax = ((max_qrec > max_qsim) ? max_qrec : max_qsim);

    var layout = {
      width: this.width,
      height: 0.68*this.width,
      title: "<b>Hydrological Regime</b>",
      yaxis: {title: "Average Discharge [m<sup>3</sup>/s]",
        hoverformat: '.3f', linewidth: 2.0, zeroline: false,
        range: [0, ymax*1.05], fixedrange: true,
      },
      xaxis: {
        title: "Month", showgrid: false, type: '-', linewidth: 2.0,
      },
      legend: {font:{size:14}, orientation: "h", x: 0.25, y: 1,
                tracegroupgap: 20, bgcolor: 'rgba(0,0,0,0)',
      },
      margin: {
        l: 50, b: 50, r: 50, t: 30, pad: 10
      },
      bargap: 0.35,
    };

    var config = {modeBarButtons:[
        ['hoverCompareCartesian'], ['toImage'],
        ['sendDataToCloud'],
      ], displaylogo: false,
    };

    $(this.div_reg).html('');
    Plotly.newPlot(this.div_reg, data, layout, config);
  }

  function onRelayoutCallBack(e, kwd){
    var keys = Object.keys(e),
        values = Object.values(e);

    if (keys.includes("xaxis.autorange")) {
      enable_timepickers_for_plots(true);
      hbv.d.show(0);
      return undefined;
    }
    else if (keys.includes("dragmode")) {
      return undefined;
    }
    else if (keys.includes("hovermode")) {
      return undefined;
    }

    var e_l = $("#left").data("DateTimePicker").date(),
        e_r = $("#right").data("DateTimePicker").date(),
        kwd = kwd || "xaxis",
        kwd0 = kwd + ".range[0]",
        kwd1 = kwd + ".range[1]";

    // Identify if e is triggered by rangeSlider or zoom2d
    if (values.length===2) {
      if(keys.includes("xaxis.rangeslider.range[0]")){
        e_l = values[0];
      }
      else if (keys.includes("xaxis.rangeslider.range[1]")){
        e_r = values[0];
      }
      else
      {
        e_l = e[kwd0];
        e_r = e[kwd1];
      }
    }
    else {
      e_l = values[0][0];
      e_r = values[0][1];
    }

    if(e_l==undefined || e_r==undefined){return undefined;}

    var left = environ_index_of(e_l),
        time_left = timeof_index(left),
        right = environ_index_of(e_r, Math.floor),
        time_right = timeof_index(right);

    $("#left").data("DateTimePicker").date(time_left);
    $("#right").data("DateTimePicker").date(time_right);

    // Change current focus for Schema
    hbv.s.set_local_extrems(left, right);
    hbv.d.show(left);
  }

  function init() {
    this.init_q_plot();
    this.init_p_plot();
    this.init_t_plot();
    this.init_gw_plot();
    this.init_etp_plot();
    this.init_regime_plot();
  }

  return {width:width, time_step_type:time_step_type, div_q:div_q,
    init_q_plot:init_q_plot, div_p:div_p, div_reg:div_reg, div_etp:div_etp,
    init_p_plot:init_p_plot, init_etp_plot:init_etp_plot,
    div_t:div_t, init_t_plot:init_t_plot, init_gw_plot:init_gw_plot,
    div_gw:div_gw, X_AXIS:X_AXIS, init_regime_plot:init_regime_plot,
    relayout_counter:relayout_counter, init:init};
}
